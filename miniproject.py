# -*- coding: utf-8 -*-
"""miniproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JnS_WK1t-mz4M8Bl5zIGqHin8fdCZF8g
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn import linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

file = pd.read_csv("trial123456.csv")
print(file)

for col in file.columns:
    print(col)

keep_dat=['State/UT','Unemployment Rate (in %) - NSSO - 2011-12','poverty rate','%contribution','Literacy rate']

dat=file[keep_dat]

dat

dan=dat.dropna()

df=['Unemployment Rate (in %) - NSSO - 2011-12','poverty rate','%contribution','Literacy rate']

done=dan[df]

print(done)

done.describe()       #show the descriptive analysis

import cufflinks as cf                             #Interactive plot depicting max,median and min of all numeric dataframe columns.
fig=done.iplot(asFigure=True,kind='box')
fig.show()



import plotly.express as px                            #for interactive scatter plot to depecit the linear relationship 
fig1 = px.scatter(dan,x="Unemployment Rate (in %) - NSSO - 2011-12",y="%contribution",color='State/UT')

fig1.show()
fig2 = px.scatter(dan,x="poverty rate",y="%contribution",color='State/UT')
fig2.show()
fig3 = px.scatter(dan,x="Literacy rate",y="%contribution",color='State/UT')
fig3.show()

done.corr()                                                                 #Correlation matrix

coMatrix=done.corr()
coMatrix.style.background_gradient(cmap='coolwarm')

ax = sns.heatmap(
    coMatrix, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)

Y=done['%contribution']
X=done[['Unemployment Rate (in %) - NSSO - 2011-12','poverty rate','Literacy rate']]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state= 0)

model = linear_model.LinearRegression()
model.fit(X_train, Y_train)

from scipy.stats import linregress
print(linregress(done['%contribution'], done['Literacy rate']))
print(linregress(done['%contribution'], done['Unemployment Rate (in %) - NSSO - 2011-12']))
print(linregress(done['%contribution'], done['poverty rate']))

coeff_df = pd.DataFrame(model.coef_, X.columns, columns=['Coefficient'])
print(coeff_df)

y_pred = model.predict(X_test)
print(y_pred)



import statsmodels.api as sm
from statsmodels.sandbox.regression.predstd import wls_prediction_std

model=sm.OLS(Y_train,X_train)

result=model.fit()
predictions=result.predict(X_test)
print(predictions,Y_test)
print(result.summary())

file2 = pd.read_csv("FinalLit.csv")
print(file2)

file3=pd.merge(file, file2, on='State/UT')

file3

file3.dropna()

d={"State/UT","Literacy rate","%male","%female","%urban","%rural","%contribution"}

file3=file3[d]

file3

import plotly.graph_objects as go

# Add data
state= file3["State/UT"]


fig = go.Figure()
# Create and style traces
fig.add_trace(go.Scatter(x=state, y=file3["%male"], name='Male',
                         line=dict(color='firebrick', width=4)))
fig.add_trace(go.Scatter(x=state, y=file3["%female"], name = 'Female',
                         line=dict(color='royalblue', width=4)))

fig.add_trace(go.Scatter(x=state, y=file3["Literacy rate"], name='Literacy rate',
                         line = dict(color='green', width=4,)))

# Edit the layout
fig.update_layout(title='Literacy rate and gender',
                   xaxis_title='States',
                   yaxis_title='Rates')


fig.show()

